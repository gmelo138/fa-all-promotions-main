# Continuous integration / Continuous delivery workflow
#
# Triggered by every push on a branch or by a new release, we run this workflow to build and test the application (job: 'ci')
# If the workflow was triggered by a publish release event, we adjust the package version and publish the artefact to the GitHub Package Registry.
#
# After a successful ci run, we trigger additional jobs depending on the current pipeline goal:
# - deploy-aws-stack-dev (on main branch)
# - generate-release (if release process is triggered)
# - deploy-aws-stack-prod (if pushing a release)
# - deploy-to-app-store (if publishing a release and the current Feature App is registered in the app store)
#
# The following GitHub repository secrets are necessary for a successful workflow execution:
#
#
#
# For 'deploy-aws-stack-dev' and 'deploy-aws-stack-prod' jobs we need to configure GitHub environment secrets:
#
# Environments "development" and "production", secrets:
# - AWS_ACCOUNT_ID
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
#
#
# For 'deploy-to-app-store' job:
# - X_APPSTORE_ACCESS_KEY
#
#
# If you would like to skip the ci workflow to execute, simply add '[ci skip]' to your commit message.
# This mechanism is also used for version bumping (in order to avoid a subsequent workflow run).
#

name: 'Continuous integration / Continuous delivery'

on:
  push:
    branches: ['**']
  release:
    types: [published]
  workflow_dispatch:

env:
  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  X_APPSTORE_ACCESS_KEY: ${{ secrets.X_APPSTORE_ACCESS_KEY }}

jobs:
  ci:
    name: 'Continuous Integration'
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') && github.actor != 'dependabot[bot]'}}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      configs: ${{ steps.load-oneaudi-cli.outputs.configs }}
      app-version: ${{ steps.current-app-version.outputs.version-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.release.target_commitish }}

      - name: Load Cypress cache
        uses: actions/cache@v4.2.2
        with:
          path: |
            ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress

      - name: Setup node
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: '.nvmrc'
          cache: npm
          registry-url: https://npm.pkg.github.com

      - name: Install dependencies
        run: |
          npm ci

      - name: Save node_modules
        id: cache-node-modules
        uses: actions/cache/save@v4.2.2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-modules-cache-${{ github.sha }}

      - name: Check format
        run: npm run format:check

      - name: Check for changes in docs folder and commit
        if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/release' }}
        run: |
          npm run format:docs
          if git diff --quiet --exit-code docs/; then
            echo "No changes detected in docs folder."
          else
            echo "Changes detected in docs folder. Try commit."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add docs/
            if git status --porcelain | grep .; then
              git commit -m "chore: docs formatted automatically" --no-verify
              git push --no-verify
              echo "Changes got committed and pushed to branch"
            else
              echo "No changes to commit"
            fi
          fi

      - name: Run linter
        run: npm run lint:check

      - name: Check TypeScript
        run: npm run typescript:check

      - name: Unit test
        run: npm run test

      - name: Build
        run: npm run build

      - name: Check SSR
        run: npm run ssr:check

      - name: Automated acceptance test
        id: acceptance-test
        uses: cypress-io/github-action@v6.7.16
        continue-on-error: true
        with:
          browser: chrome
          wait-on: 'http://localhost:3000'
          start: npm run serve:ssr:ci
        env:
          CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Generate acceptance test HTML report
        run: npm run test:e2e-report

      - name: Deploy acceptance test report in GitHub Pages
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: tests/cypress/reports/html
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      # - name: Test accessibility and performance
      #   run: npm run lighthouse:ci

      # - name: Save lighthouse report
      #   uses: actions/upload-artifact@v4.6.1
      #   with:
      #     name: lighthouse-report
      #     path: .lighthouseci
      #     include-hidden-files: true
      #     if-no-files-found: error

      # - name: Check test outcomes
      #   run: |
      #     if [ ${{ steps.acceptance-test.outcome }} = failure ]; then
      #       echo -e '\033[0;31mWorkflow run has failed because the acceptance test did not pass. Check the logs or test report page for details.'; exit 1
      #     fi

      # - name: Copy lighthouse reports to build folder
      #   run: |
      #     mkdir -p dist/app/lighthouse
      #     cp .lighthouseci/* dist/app/lighthouse/

      - name: Compress build
        run: tar -czf dist.tar.gz ./dist

      - name: Upload build
        uses: actions/upload-artifact@v4.6.1
        with:
          name: dist
          path: ./dist.tar.gz
          if-no-files-found: error

      - id: load-oneaudi-cli
        name: Load oneaudi-cli.json
        run: |
          content=`cat ./oneaudi-cli.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/''}"
          content="${content//$'\r'/''}"
          echo "configs=$content" >> $GITHUB_OUTPUT

      - name: Current App Version
        id: current-app-version
        run: |
          if [ ${{ github.event_name }} == 'workflow_dispatch' ]; then
            echo "version-name=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          elif [ ${{ github.event_name }} == 'release' ]; then
            echo "version-name=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "Ignoring the event - ${{ github.event_name }} as it would not trigger the release jobs in the workflow."
          fi

  run-validation-service:
    needs: ci
    name: Run Validation Service
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.release.target_commitish }}

      - name: Deduce Previous Release Tag
        id: list-releases
        run: |
          git fetch --tags --prune-tags --depth=1 origin &>/dev/null
          git tag --sort=-creatordate | tail -n +2 | grep -E "^v?[0-9]+\.[0-9]+\.[0-9]+$" | head -n 1 > last_release_tag.txt

      - name: Download build
        uses: actions/download-artifact@v4.1.9
        with:
          name: dist

      - name: Decompress build
        run: tar -xf dist.tar.gz

      - name: Run Validation Action
        uses: oneaudi/oneaudi-falcon-pre-publish-version-validator-action@v2.0.2
        with:
          APP-CURRENT-RELEASE: ${{ needs.ci.outputs.app-version }}
          APP-RELEASE-TAGS-FILE: ./last_release_tag.txt
          MODEL-JSON-PATH: ./dist/app/models/root.json

  generate-release:
    name: 'oneAudi :: Generate Release Package'
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.target_commitish }}

      - name: Setup node
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: '.nvmrc'
          cache: npm
          registry-url: https://npm.pkg.github.com

      - name: Restore node_modules
        id: cached-node-modules
        uses: actions/cache/restore@v4.2.2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-modules-cache-${{ github.sha }}

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --repository-url https://github.com/oneaudi/${{ github.event.repository.name }}.git

      - name: Call release pipeline
        if: env.NEXT_RELEASE_VERSION != null
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run cicd.yml --ref $NEXT_RELEASE_VERSION

      - name: Merge Semantic Release changes from release Branch in main Branch
        if: env.NEXT_RELEASE_VERSION != null
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch
          git checkout release
          git pull
          git checkout main
          git merge release
          git push --force

  # Depending on a successful CI/CD job, we trigger the deployment to the dedicated, self-contained AWS stack (for the main branch)
  deploy-aws-stack-dev:
    name: 'Deploy AWS Stack (dev)'
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: development
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.release.target_commitish }}

      - name: Setup node
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: '.nvmrc'
          cache: npm
          registry-url: https://npm.pkg.github.com

      - name: Restore node_modules
        id: cached-node-modules
        uses: actions/cache/restore@v4.2.2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-modules-cache-${{ github.sha }}

      - name: Download build
        uses: actions/download-artifact@v4.1.9
        with:
          name: dist

      - name: Decompress build
        run: tar -xf dist.tar.gz

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_OIDC_ROLE }}
          role-session-name: devdeploymentsession
          aws-region: us-east-1

      - name: Deploy to dev
        run: npm run deploy:ci
        if: env.AWS_ACCOUNT_ID != null
        env:
          STAGE: dev
          APP_NAME: fa-all-promotions
          APP_VERSION: next
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DOMAIN: collab.apps.one.audi
          APP_BASE_DIRECTORY: ./dist/app

      - name: Log skips reasons
        if: env.AWS_ACCOUNT_ID == null
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: echo "::warning::Some steps were skipped because some of your GitHub secrets are not set, please check AWS_ACCOUNT_ID"

  # Depending on a successful CI/CD job, we trigger the deployment to the dedicated, self-contained AWS stack (on release)
  deploy-aws-stack-prod:
    name: 'Deploy AWS Stack (prod)'
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
    needs: [ci, run-validation-service]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.release.target_commitish }}

      - name: Load Cypress cache
        uses: actions/cache@v4.2.2
        with:
          path: |
            ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress

      - name: Setup node
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: '.nvmrc'
          cache: npm
          registry-url: https://npm.pkg.github.com
          always-auth: true

      - name: Restore node_modules
        id: cached-node-modules
        uses: actions/cache/restore@v4.2.2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-modules-cache-${{ github.sha }}

      - name: Download build
        uses: actions/download-artifact@v4.1.9
        with:
          name: dist

      - name: Decompress build
        run: tar -xf dist.tar.gz

      - name: Capture Changelog
        continue-on-error: true
        run: |
          npm run convert:md-json
          cp changelog.json ./dist/app/protected

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_OIDC_ROLE }}
          role-session-name: proddeploymentsession
          aws-region: us-east-1

      - name: Deploy to Production
        run: npm run deploy:ci
        if: env.AWS_ACCOUNT_ID != null
        env:
          STAGE: prod
          APP_NAME: fa-all-promotions
          APP_VERSION: ${{ needs.ci.outputs.app-version }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DOMAIN: collab.apps.one.audi
          APP_BASE_DIRECTORY: ./dist/app

      - name: Log skips reasons
        if: env.AWS_ACCOUNT_ID == null
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: echo "::warning::Some steps were skipped because some of your GitHub secrets are not set, please check secrets AWS_ACCOUNT_ID"

  # When a release its done, depending on a successful CI/CD job, we trigger the publication of the new version to the oneAudi App Store
  publish-to-app-store:
    name: 'Publish to App Store'
    if: (github.event_name == 'workflow_dispatch' || github.event_name == 'release') && fromJSON(needs.ci.outputs.configs).project.features.registeredInAppStore
    needs: [ci, deploy-aws-stack-prod]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.release.target_commitish }}

      # - name: Download Lighthouse report
      #   uses: actions/download-artifact@v4.1.9
      #   with:
      #     path: .lighthouseci
      #     name: lighthouse-report

      - name: Setup node
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: '.nvmrc'
          cache: npm
          registry-url: https://npm.pkg.github.com

      - name: Capture WebVitals
        run: npm run captureWebVitals

      - name: Restore node_modules
        id: cached-node-modules
        uses: actions/cache/restore@v4.2.2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-modules-cache-${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: arn:aws:iam::374014568437:role/${{ secrets.AWS_OIDC_ROLE }}
          role-session-name: pubappstoresession
          aws-region: us-east-1

      - name: Publish to oneAudi App Store
        if: env.X_APPSTORE_ACCESS_KEY != null
        uses: oneaudi/oneaudi-publish-to-app-store-action@v5.1.0
        with:
          BASE-URL: https://${{ github.event.repository.name }}.cdn.prod.collab.apps.one.audi/${{ needs.ci.outputs.app-version }}
          APP-VERSION: ${{ needs.ci.outputs.app-version }}
          X-APPSTORE-ACCESS-KEY: ${{ secrets.X_APP_ACCESS_KEY }}

      - name: Log skips reasons
        if: env.X_APPSTORE_ACCESS_KEY == null
        run: echo "::warning::Some steps were skipped because some of your GitHub secrets are not set, please check X_APPSTORE_ACCESS_KEY"
